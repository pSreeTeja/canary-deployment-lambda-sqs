name: Canary Deployment

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-south-1
  PROCESSING_LAMBDA_NAME: ProcessingLambda
  ROUTING_LAMBDA_NAME: RoutingLambda
  CANARY_ALIAS_NAME: canary
  STABLE_ALIAS_NAME: stable
  CANARY_PERCENT: 10

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CDK
        run: npx cdk deploy --require-approval never

      - name: Publish new version of processing lambda
        id: publish
        run: |
          VERSION=$(aws lambda publish-version \
            --function-name $PROCESSING_LAMBDA_NAME \
            --query 'Version' --output text)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Ensure stable alias exists (only creates if not present)
        run: |
          set +e
          EXISTS=$(aws lambda get-alias \
            --function-name $PROCESSING_LAMBDA_NAME \
            --name $STABLE_ALIAS_NAME \
            --query 'FunctionVersion' --output text 2>/dev/null)
          if [ "$EXISTS" == "None" ] || [ -z "$EXISTS" ]; then
            echo "Stable alias does not exist, creating..."
            aws lambda create-alias \
              --function-name $PROCESSING_LAMBDA_NAME \
              --name $STABLE_ALIAS_NAME \
              --function-version ${{ steps.publish.outputs.VERSION }}
          fi
          set -e

      - name: Ensure canary alias exists (only creates if not present)
        run: |
          set +e
          EXISTS=$(aws lambda get-alias \
            --function-name $PROCESSING_LAMBDA_NAME \
            --name $CANARY_ALIAS_NAME \
            --query 'FunctionVersion' --output text 2>/dev/null)
          if [ "$EXISTS" == "None" ] || [ -z "$EXISTS" ]; then
            echo "Canary alias does not exist, creating..."
            aws lambda create-alias \
              --function-name $PROCESSING_LAMBDA_NAME \
              --name $CANARY_ALIAS_NAME \
              --function-version ${{ steps.publish.outputs.VERSION }}
          fi
          set -e

      - name: Update canary alias to new version
        run: |
          aws lambda update-alias \
            --function-name $PROCESSING_LAMBDA_NAME \
            --name $CANARY_ALIAS_NAME \
            --function-version ${{ steps.publish.outputs.VERSION }}

      - name: Get alias ARNs
        id: alias_arns
        run: |
          STABLE_ARN=$(aws lambda get-alias \
            --function-name $PROCESSING_LAMBDA_NAME \
            --name $STABLE_ALIAS_NAME \
            --query 'AliasArn' --output text)
          CANARY_ARN=$(aws lambda get-alias \
            --function-name $PROCESSING_LAMBDA_NAME \
            --name $CANARY_ALIAS_NAME \
            --query 'AliasArn' --output text)
          echo "STABLE_ALIAS_ARN=$STABLE_ARN" >> $GITHUB_OUTPUT
          echo "CANARY_ALIAS_ARN=$CANARY_ARN" >> $GITHUB_OUTPUT

      - name: Update Routing Lambda environment
        run: |
          aws lambda update-function-configuration \
            --function-name $ROUTING_LAMBDA_NAME \
            --environment "Variables={
              CANARY_PERCENT=${{ env.CANARY_PERCENT }},
              STABLE_ALIAS_ARN='${{ steps.alias_arns.outputs.STABLE_ALIAS_ARN }}',
              CANARY_ALIAS_ARN='${{ steps.alias_arns.outputs.CANARY_ALIAS_ARN }}'
            }"

      # - name: Wait and check CloudWatch errors
      #   run: |
      #     echo "Waiting for 10 minutes to collect canary metrics..."
      #     sleep 600
      #     END=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      #     START=$(date -u -d "-10 minutes" +"%Y-%m-%dT%H:%M:%SZ")
      #     ERRORS=$(aws cloudwatch get-metric-statistics \
      #       --namespace AWS/Lambda \
      #       --metric-name Errors \
      #       --dimensions Name=FunctionName,Value=$PROCESSING_LAMBDA_NAME Name=Resource,Value=$PROCESSING_LAMBDA_NAME:$CANARY_ALIAS_NAME \
      #       --statistics Sum \
      #       --start-time "$START" \
      #       --end-time "$END" \
      #       --period 300 \
      #       --query 'Datapoints[0].Sum' \
      #       --output text)
      #     echo "Canary error count: $ERRORS"
      #     if [[ "$ERRORS" != "None" && $(echo "$ERRORS > 1" | bc -l) == 1 ]]; then
      #       echo "Rolling back: pointing canary alias back to stable"
      #       STABLE_VERSION=$(aws lambda get-alias \
      #         --function-name $PROCESSING_LAMBDA_NAME \
      #         --name $STABLE_ALIAS_NAME \
      #         --query 'FunctionVersion' --output text)
      #       aws lambda update-alias \
      #         --function-name $PROCESSING_LAMBDA_NAME \
      #         --name $CANARY_ALIAS_NAME \
      #         --function-version "$STABLE_VERSION"
      #     fi
